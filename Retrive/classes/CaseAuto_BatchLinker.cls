public without sharing class CaseAuto_BatchLinker {
	 //=============================
   // Meta Information
   //=============================	
   // Namespace or Enhancement:8533b- BCT case automation
   // Description: Used to hold logic for kicking off each batch class from Case automation
   // Called by:
  
   /*==================================================================================
   Version					Author			Date					Reason
   1.0						Saraag			11/13/2013   			Created
   2.0                      Saraag          11/26/2013              Updated to send Id only	
   2.1						Saraag			12/8/2013			    Test.isRunningTest
   3.0						Saraag			6/29/2014				Disabling pers pkg,nonpkg, success nonpkg for CRD Builder.
   ====================================================================================*/
   
   //============================
   // Member variabels   
   //============================
   	integer BATCHSIZE; 
   	
   	public CaseAuto_BatchLinker(){
   		BATCHSIZE=Integer.valueOf(system.label.CaseAutho_Batchsize);
   	}
  
   //=============================
   // Member Methods  
   //=============================
   
   // Method Name:callNext
   // Arguments:string calling classname	
   // Return:NA
   // Description:public method that all other batch classes call on Finish with their names as argument.
   public void callNext(string callerName){
   		if(callerName!=NULL&&callerName!=''&&!System.Label.BypassCaseAutoLinking.equalsIgnoreCase('true')&&!Test.isRunningTest()){
   			     string cname=callerName.trim();
			   	 if(cname.equalsIgnoreCase('BAT_TradFallNotifProcessor')){
						callTradStdPkg();
			   	 }else  if(cname.equalsIgnoreCase('BAT_TradStdPkgProcessor')){
			   	 	//Added for Sep2014 CRDB release
			   	 		 Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
						 String[] toAddresses = System.Label.CaseAuto_confirmationEmailList.split(',',0);
						 mail.setToAddresses(toAddresses);
						 mail.setSubject('NoReply:BCT CaseAutomation processing Completed');
						 mail.setPlainTextBody('Autogenerated Message: BCTCase automation finished processing records and working on cases. ');
						 Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
				   //end add
			   	 		//callTradStdNonPkg();
			   	 }else  if(cname.equalsIgnoreCase('BAT_TradStdNPkgProcessor')){
				   	 	//callTradPERSPkg();
			   	 }
			   	 else  if(cname.equalsIgnoreCase('BAT_PERSPkgProcessor')){
			   	 	    //callTradPERSNonPkg();
			   	 }
		   	 
   		}
   }
   
   public Id callTradStdPkg(){
   		Schema.DescribeSObjectResult  DescribeRec=NotificationStandard__c.sObjectType.getDescribe();
		Map<String, Schema.SObjectField> FieldsMap=DescribeRec.fields.getMap();
		String qry='';
		for(String s:FieldsMap.keyset()){
		    qry+=s+',';
		}
		qry=qry.left(qry.length()-1); 
		String s;
		if(system.label.CaseAuto_sendIdOnly.equalsIgnoreCase('true'))
		    	s='SELECT id FROM NotificationStandard__c where Package__c=true AND Processed__c=false ORDER BY Name DESC';
		else
		     	s='SELECT '+qry+' FROM NotificationStandard__c where Package__c=true AND Processed__c=false ORDER BY Name DESC';
		BAT_TradStdPkgProcessor bch=new BAT_TradStdPkgProcessor(s);
		ID batchprocessid = Database.executeBatch(bch,BATCHSIZE);
		//JobLogger.startBatch(NULL,'Starting BAT_TradStdPkgProcessor+BatchId:'+batchprocessId,userinfo.getUserId(),system.now(),true,'TraditionalStdPkg');
		return batchprocessid;
   }
   public Id callTradStdNonPkg(){
   						Schema.DescribeSObjectResult  DescribeRec=NotificationStandard__c.sObjectType.getDescribe();
			            //get all field names
			            Map<String, Schema.SObjectField> FieldsMap=DescribeRec.fields.getMap();
			            String qry='';
			            for(String s:FieldsMap.keyset()){
			               qry+=s+',';
			            }
			            qry=qry.left(qry.length()-1); //removing the extra comma
			            String s;
			            if(system.label.CaseAuto_sendIdOnly.equalsIgnoreCase('true'))
			            	s='SELECT Id FROM NotificationStandard__c where Package__c=false AND Processed__c=false ORDER BY Name DESC';			            	
			            else        
			            	s='SELECT '+qry+' FROM NotificationStandard__c where Package__c=false AND Processed__c=false ORDER BY Name DESC';
			            BAT_TradStdNPkgProcessor bch=new BAT_TradStdNPkgProcessor(s);
			            ID batchprocessid= Database.executeBatch(bch,BATCHSIZE);
		return batchprocessid;
   }
   public Id callTradPERSPkg(){
   						Schema.DescribeSObjectResult  DescribeRec=PERS_report__c.sObjectType.getDescribe();
			            //get all field names
			            Map<String, Schema.SObjectField> FieldsMap=DescribeRec.fields.getMap();
			            String qry='';
			            for(String s:FieldsMap.keyset()){
			               qry+=s+',';
			            }
			            qry=qry.left(qry.length()-1); //removing the extra comma
			            String s;
			            if(system.label.CaseAuto_sendIdOnly.equalsIgnoreCase('true'))
			    			s='SELECT Id FROM PERS_report__c where  Package__c=\'true\' AND Processed__c=False ORDER BY Name DESC';//This may change           
			            else
			    			s='SELECT '+qry+' FROM PERS_report__c where  Package__c=\'true\' AND Processed__c=False ORDER BY Name DESC';//This may change           
			    		BAT_PERSPkgProcessor bch=new BAT_PERSPkgProcessor(s);
			            ID batchprocessid= Database.executeBatch(bch,BATCHSIZE);
			           // JobLogger.startBatch(NULL,'Starting BAT_PERSPkgProcessor+BatchId:'+batchprocessId,userinfo.getUserId(),system.now(),true,'BAT_PERSPkgProcessor');
		        
		return batchprocessid;
   }
   public Id callTradPERSNonPkg(){
   						//get all field names
			   	 		Schema.DescribeSObjectResult  DescribeRec=PERS_report__c.sObjectType.getDescribe();
			   	 		Map<String, Schema.SObjectField> FieldsMap=DescribeRec.fields.getMap();
			            String qry='';
			            for(String s:FieldsMap.keyset()){
			               qry+=s+',';
			            }
			            qry=qry.left(qry.length()-1); //removing the extra comma
			                    
			            string pv='false'; 
			            String s;
			            if(system.label.CaseAuto_sendIdOnly.equalsIgnoreCase('true'))
			             	s='SELECT Id FROM PERS_report__c where  Package__c=\'false\' AND Processed__c=False ORDER BY Name DESC';
			            else
			             	s='SELECT '+qry+' FROM PERS_report__c where  Package__c=\'false\' AND Processed__c=False ORDER BY Name DESC';
			             BAT_PERSNonPkgProcessor bch=new BAT_PERSNonPkgProcessor(s);
			             ID batchprocessid= Database.executeBatch(bch,BATCHSIZE);
			           // JobLogger.startBatch(NULL,'Starting BAT_PERSNonPkgProcessor+BatchId:'+batchprocessId,userinfo.getUserId(),system.now(),true,'BAT_PERSNonPkgProcessor');
		return batchprocessid;
   }
   
   public Id callTradFallout(){
   	    String qry='';   
        Schema.DescribeSObjectResult  DescribeRec=NotificationFallout__c.sObjectType.getDescribe();
        Map<String, Schema.SObjectField> parentFieldsMap= DescribeRec.fields.getMap();
            for (String s:parentFieldsMap.keyset()){
               qry+=s+',';
            }
            
        qry=qry.left(qry.length()-1); 
        String query = 'SELECT '+qry+ ' FROM NotificationFallout__c WHERE Processed__c=False ORDER BY Name DESC';
        
        ID batchprocessid= database.executeBatch(new BAT_TradFallNotifProcessor(query),BATCHSIZE );
		return batchprocessid;
   }
   
}//End class CaseAuto_BatchLinker