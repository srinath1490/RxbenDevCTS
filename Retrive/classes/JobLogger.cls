public without sharing class JobLogger{
    private static Joblog__c Joblog;
    private static Blob attachm;
    public static Id create(Id ApexClass,Datetime EndTime,String Error,String Notes,Id userid,Datetime StartTime,Boolean success,String task,Blob attach){
        Joblog=new Joblog__c(End_Time__c=EndTime,Error__c=Error,Notes__c=Notes,RequestedBy__c=userid,Start_time__c=StartTime,Success__c=success,task__c=task);
        Attachm=attach;
        Id recid=insertlog();
        return recid;
    }
	
	public static Id startBatch(String Error,String Notes,Id userid,Datetime StartTime,Boolean success,String task){
        Joblog=new Joblog__c(Error__c=Error,Notes__c=Notes,RequestedBy__c=userid,Start_time__c=StartTime,Success__c=success,task__c=task);
       	return insertlog();
    }
    
    public static Id endBatch(Datetime EndTime,String Error,String Notes,Id userid,Boolean success,String task){
        Joblog=new Joblog__c(End_Time__c=EndTime,Error__c=Error,Notes__c=Notes,RequestedBy__c=userid,Success__c=success,task__c=task);
       	return insertlog();
    }
    
    public static Id endBatch(Datetime EndTime,String Error,String Notes,Id userid,Boolean success,String task,AsyncApexJob asyncjob){
       if(asyncJob==NULL)
        	return endBatch(EndTime,Error,Notes,userId,success,task);
       else{
        if(asyncJob.Status=='Failed'||asyncJob.Status=='Aborted'||asyncJob.NumberofErrors>0){
        	   Joblog=new Joblog__c(End_Time__c=EndTime,Error__c=Error,Notes__c=Notes+' AsyncJobRec:'+JSON.serializePretty(asyncJob),RequestedBy__c=userid,Success__c=false,task__c=task);
        	   Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
			   String[] toAddresses = System.Label.CaseAuto_confirmationEmailList.split(',',0);
			   mail.setToAddresses(toAddresses);
			   mail.setSubject('BCT CaseAutomation Failed or Aborted');
			   mail.setPlainTextBody('Autogenerated Message: BCTCase automation failed or aborted!.AsyncApexJob:'+JSON.serializePretty(asyncJob));
			   Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
	        }
        else	
        	  Joblog=new Joblog__c(End_Time__c=EndTime,Error__c=Error,Notes__c=Notes+' AsyncJobRec:'+JSON.serializePretty(asyncJob),RequestedBy__c=userid,Success__c=success,task__c=task);
       	return insertlog();
       }
    }
    
    
    public static Id create(){
        Joblog=new Joblog__c();
        Id recid=insertlog();
        return recid;
    }
    
    public static Id create(ID BatchId,String task){
        Joblog=new Joblog__c(Notes__c='BatchID:'+BatchId,task__c=task);
        Id recid=insertlog();
        return recid;
    }
    
    public static Id create(Blob attach){
        Joblog=new Joblog__c();
        attachm=attach;
        Id recid=insertlog();
        return recid;
    }
    
    private static id insertlog(){
        try{
            insert Joblog;
            if(attachm!=NULL){
             Attachment att=new Attachment();
             att.Body=attachm;
             att.Name='Joblog_' + System.now().format('yyyy_MM_dd_hh_mm_ss') + '.csv';
             att.parentId=JobLog.id;
             insert att;
             
           }//End if
        }Catch(Exception e){
            system.debug(logginglevel.error,'Error while creating Joblog.System message:'+e.getMessage());
            throw e;
        }
        return Joblog.id;
    }
}